A. Test decomp method
     - The Cholesky-Banachiewicz algorithm is implemented for decomposition.
     - The deomposittion is tested on random real symmetric positive definite matrices
     - To create a random real symmetric positive difinite matrix first at random square real matrix B is generated. Then A = B^TB, and A is symmetric and positive definite.
     A:

       629        612        463        563        484        599        560 
       612        929        597        552        534        634        393 
       463        597        743        614        204        368        416 
       563        552        614        833        355        510        557 
       484        534        204        355        654        589        454 
       599        634        368        510        589        720        547 
       560        393        416        557        454        547        638 
     L:

      25.1          0          0          0          0          0          0 
      24.4       18.3          0          0          0          0          0 
      18.5       8.02       18.4          0          0          0          0 
      22.4      0.231       10.8       14.6          0          0          0 
      19.3       3.45      -9.79        1.8       13.1          0          0 
      23.9        2.8      -5.19       1.99        4.9       9.32          0 
      22.3      -8.32       3.84       1.12       6.69       2.35       2.01 
     - Check that L is lower triangular using Cholesky.lower_triangular: True
     - Check that L*L^T = A: True

B. Implementing linear equation solver, calculation of determinant and calculation of inverse matrix
     - Firstly the linear equation solver is implemented. A linear equation Ax=b can be rewritten to LL^Tx=b => Ly=b with L^Tx=y
     - As L is lower triangular and L^T therefore is upper triangular, Ly=b can be solved using forward substitution and L^Tx=y can afterwards be solved by back substitution.
     - Test of implemented solver on random real symmetric and positive definite matrix A and random matrix b:
 A:

  1.28e+03        769   1.23e+03        461   1.21e+03        824        624 
       769        718        907        573        790        511        381 
  1.23e+03        907   1.35e+03        637   1.14e+03        776        657 
       461        573        637        724        596        521        379 
  1.21e+03        790   1.14e+03        596   1.36e+03        863        549 
       824        511        776        521        863        832        533 
       624        381        657        379        549        533        530 
 L:

      35.8          0          0          0          0          0          0 
      21.5         16          0          0          0          0          0 
      34.3       10.6       7.68          0          0          0          0 
      12.9       18.5     -0.191       14.7          0          0          0 
      33.8       3.91      -8.52       5.85        9.6          0          0 
        23      0.974      -3.15         14      -3.03       9.24          0 
      17.4      0.364       7.16       10.1      -4.28     -0.163       7.29 
 b: 
        59         65         83         12         31          7         93 
 Computed x:
     -1.61       2.26     -0.605      -1.68      0.667      0.133       1.58 
     - Is Ax=b? True 
     - The implemented solve method works as intended.

     - Secondly a method for calculation of the determinant is implemented.
     - det(A)=det(LL^T)=det(L)det(L^T)=det(L)^2. The determinant of L is the product of the diagonal elements, as it is lower triangular.
     - Testing the implemented method on random 3x3 matrix A=[[1, 2, 3],[0, 1, 4], [1, 0, 1]] with A^TA = [[2,2,4],[2,5,10],[4, 10, 26]]. det(A^TA) = 36
     - Is computed determiant for A^TA = 36? True 

     - Lastly a method for calculating the inverse is implemented.
     - This is done by using the implemenbted solver to solve n linear equations Ax_i=e_i, where e_i is the i'th unit vector. x_i the make up the columns of the inverse matrix.
     - The implemented method is tested on a random square symmetric real positive definite matrix C:

   1.6e+03        849        979   1.09e+03        809        909    1.4e+03   1.18e+03   1.48e+03 
       849        949        719        630        715        770        768        715   1.07e+03 
       979        719   1.13e+03        980        932        677   1.04e+03        860   1.25e+03 
  1.09e+03        630        980   1.08e+03        914        774    1.1e+03        933   1.23e+03 
       809        715        932        914   1.15e+03        872        899        872   1.32e+03 
       909        770        677        774        872   1.06e+03        844        902   1.22e+03 
   1.4e+03        768   1.04e+03    1.1e+03        899        844   1.31e+03   1.09e+03   1.42e+03 
  1.18e+03        715        860        933        872        902   1.09e+03   1.19e+03   1.41e+03 
  1.48e+03   1.07e+03   1.25e+03   1.23e+03   1.32e+03   1.22e+03   1.42e+03   1.41e+03   1.93e+03 
     - Calculated inverse of C is called B and is the following matrix:

     0.238     -0.037     0.0608     0.0657     0.0378    -0.0124     -0.349    -0.0371     0.0236 
    -0.037     0.0103    -0.0115   -0.00858   -0.00409   -0.00066      0.054    0.00822   -0.00709 
    0.0608    -0.0115     0.0237     0.0103    0.00936   0.000633    -0.0882   -0.00708    0.00125 
    0.0657   -0.00858     0.0103     0.0408   -0.00115   -0.00717     -0.113    -0.0183     0.0236 
    0.0378   -0.00409    0.00936   -0.00115     0.0203    -0.0031    -0.0443    0.00266    -0.0132 
   -0.0124   -0.00066   0.000633   -0.00717    -0.0031    0.00681       0.02    0.00116   -0.00375 
    -0.349      0.054    -0.0882     -0.113    -0.0443       0.02      0.531     0.0595    -0.0506 
   -0.0371    0.00822   -0.00708    -0.0183    0.00266    0.00116     0.0595     0.0197    -0.0207 
    0.0236   -0.00709    0.00125     0.0236    -0.0132   -0.00375    -0.0506    -0.0207     0.0344 
     - Is CB=I? True
     - As seen, the routine for calculation of the inverse works as intended.

C. Operations count
     - The measured time of a Cholesky decomposition as a function of matrix size N can be seen plotted in times.gnuplot.svg.
     - The function fitted to the time of a QR decomposition as a function of N is also plotted in times.gnuplot.svg for comparison.
     - This function was taken from homework 1, linear equations.
     - It is seen how the time scaling with N is a lot lower for Cholesky compared to QR decomposition. The scaling is still proportional to N^3 however.
     - It should be noted, however, that the QR decompositions in homework 1 was not performed specifically on symmetric  positive definite matrices, which is the case for the Cholesky decomposition.
